#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataTransfer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="E8Realtyes")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgency(Agency instance);
    partial void UpdateAgency(Agency instance);
    partial void DeleteAgency(Agency instance);
    partial void InsertWallMatherial(WallMatherial instance);
    partial void UpdateWallMatherial(WallMatherial instance);
    partial void DeleteWallMatherial(WallMatherial instance);
    partial void InsertAppartmentForSale(AppartmentForSale instance);
    partial void UpdateAppartmentForSale(AppartmentForSale instance);
    partial void DeleteAppartmentForSale(AppartmentForSale instance);
    partial void InsertBalcony(Balcony instance);
    partial void UpdateBalcony(Balcony instance);
    partial void DeleteBalcony(Balcony instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertHomestadForSale(HomestadForSale instance);
    partial void UpdateHomestadForSale(HomestadForSale instance);
    partial void DeleteHomestadForSale(HomestadForSale instance);
    partial void InsertHousesForSale(HousesForSale instance);
    partial void UpdateHousesForSale(HousesForSale instance);
    partial void DeleteHousesForSale(HousesForSale instance);
    partial void InsertPlacementForSale(PlacementForSale instance);
    partial void UpdatePlacementForSale(PlacementForSale instance);
    partial void DeletePlacementForSale(PlacementForSale instance);
    partial void InsertPlaning(Planing instance);
    partial void UpdatePlaning(Planing instance);
    partial void DeletePlaning(Planing instance);
    partial void InsertRielter(Rielter instance);
    partial void UpdateRielter(Rielter instance);
    partial void DeleteRielter(Rielter instance);
    partial void InsertRoomsForSale(RoomsForSale instance);
    partial void UpdateRoomsForSale(RoomsForSale instance);
    partial void DeleteRoomsForSale(RoomsForSale instance);
    partial void InsertSanUsel(SanUsel instance);
    partial void UpdateSanUsel(SanUsel instance);
    partial void DeleteSanUsel(SanUsel instance);
    partial void InsertStreet(Street instance);
    partial void UpdateStreet(Street instance);
    partial void DeleteStreet(Street instance);
    partial void InsertVariant(Variant instance);
    partial void UpdateVariant(Variant instance);
    partial void DeleteVariant(Variant instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::DataTransfer.Properties.Settings.Default.E8RealtyesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agency> Agencies
		{
			get
			{
				return this.GetTable<Agency>();
			}
		}
		
		public System.Data.Linq.Table<WallMatherial> WallMatherials
		{
			get
			{
				return this.GetTable<WallMatherial>();
			}
		}
		
		public System.Data.Linq.Table<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this.GetTable<AppartmentForSale>();
			}
		}
		
		public System.Data.Linq.Table<Balcony> Balconies
		{
			get
			{
				return this.GetTable<Balcony>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<HomestadForSale> HomestadForSales
		{
			get
			{
				return this.GetTable<HomestadForSale>();
			}
		}
		
		public System.Data.Linq.Table<HousesForSale> HousesForSales
		{
			get
			{
				return this.GetTable<HousesForSale>();
			}
		}
		
		public System.Data.Linq.Table<PlacementForSale> PlacementForSales
		{
			get
			{
				return this.GetTable<PlacementForSale>();
			}
		}
		
		public System.Data.Linq.Table<Planing> Planings
		{
			get
			{
				return this.GetTable<Planing>();
			}
		}
		
		public System.Data.Linq.Table<Rielter> Rielters
		{
			get
			{
				return this.GetTable<Rielter>();
			}
		}
		
		public System.Data.Linq.Table<RoomsForSale> RoomsForSales
		{
			get
			{
				return this.GetTable<RoomsForSale>();
			}
		}
		
		public System.Data.Linq.Table<SanUsel> SanUsels
		{
			get
			{
				return this.GetTable<SanUsel>();
			}
		}
		
		public System.Data.Linq.Table<Street> Streets
		{
			get
			{
				return this.GetTable<Street>();
			}
		}
		
		public System.Data.Linq.Table<Variant> Variants
		{
			get
			{
				return this.GetTable<Variant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agency")]
	public partial class Agency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAgency;
		
		private string _vcName;
		
		private string _vcAddress;
		
		private string _vcDirectorName;
		
		private string _vcContacts;
		
		private string _vcComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAgencyChanging(int value);
    partial void OnidAgencyChanged();
    partial void OnvcNameChanging(string value);
    partial void OnvcNameChanged();
    partial void OnvcAddressChanging(string value);
    partial void OnvcAddressChanged();
    partial void OnvcDirectorNameChanging(string value);
    partial void OnvcDirectorNameChanged();
    partial void OnvcContactsChanging(string value);
    partial void OnvcContactsChanged();
    partial void OnvcCommentsChanging(string value);
    partial void OnvcCommentsChanged();
    #endregion
		
		public Agency()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAgency", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAgency
		{
			get
			{
				return this._idAgency;
			}
			set
			{
				if ((this._idAgency != value))
				{
					this.OnidAgencyChanging(value);
					this.SendPropertyChanging();
					this._idAgency = value;
					this.SendPropertyChanged("idAgency");
					this.OnidAgencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcName", DbType="VarChar(50)")]
		public string vcName
		{
			get
			{
				return this._vcName;
			}
			set
			{
				if ((this._vcName != value))
				{
					this.OnvcNameChanging(value);
					this.SendPropertyChanging();
					this._vcName = value;
					this.SendPropertyChanged("vcName");
					this.OnvcNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcAddress", DbType="VarChar(100)")]
		public string vcAddress
		{
			get
			{
				return this._vcAddress;
			}
			set
			{
				if ((this._vcAddress != value))
				{
					this.OnvcAddressChanging(value);
					this.SendPropertyChanging();
					this._vcAddress = value;
					this.SendPropertyChanged("vcAddress");
					this.OnvcAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcDirectorName", DbType="VarChar(50)")]
		public string vcDirectorName
		{
			get
			{
				return this._vcDirectorName;
			}
			set
			{
				if ((this._vcDirectorName != value))
				{
					this.OnvcDirectorNameChanging(value);
					this.SendPropertyChanging();
					this._vcDirectorName = value;
					this.SendPropertyChanged("vcDirectorName");
					this.OnvcDirectorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcContacts", DbType="VarChar(100)")]
		public string vcContacts
		{
			get
			{
				return this._vcContacts;
			}
			set
			{
				if ((this._vcContacts != value))
				{
					this.OnvcContactsChanging(value);
					this.SendPropertyChanging();
					this._vcContacts = value;
					this.SendPropertyChanged("vcContacts");
					this.OnvcContactsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComments", DbType="VarChar(200)")]
		public string vcComments
		{
			get
			{
				return this._vcComments;
			}
			set
			{
				if ((this._vcComments != value))
				{
					this.OnvcCommentsChanging(value);
					this.SendPropertyChanging();
					this._vcComments = value;
					this.SendPropertyChanged("vcComments");
					this.OnvcCommentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WallMatherial")]
	public partial class WallMatherial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idWallMatherial;
		
		private string _vcWallMatherial;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<HousesForSale> _HousesForSales;
		
		private EntitySet<PlacementForSale> _PlacementForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidWallMatherialChanging(int value);
    partial void OnidWallMatherialChanged();
    partial void OnvcWallMatherialChanging(string value);
    partial void OnvcWallMatherialChanged();
    #endregion
		
		public WallMatherial()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._HousesForSales = new EntitySet<HousesForSale>(new Action<HousesForSale>(this.attach_HousesForSales), new Action<HousesForSale>(this.detach_HousesForSales));
			this._PlacementForSales = new EntitySet<PlacementForSale>(new Action<PlacementForSale>(this.attach_PlacementForSales), new Action<PlacementForSale>(this.detach_PlacementForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWallMatherial", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idWallMatherial
		{
			get
			{
				return this._idWallMatherial;
			}
			set
			{
				if ((this._idWallMatherial != value))
				{
					this.OnidWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._idWallMatherial = value;
					this.SendPropertyChanged("idWallMatherial");
					this.OnidWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcWallMatherial", DbType="VarChar(50)")]
		public string vcWallMatherial
		{
			get
			{
				return this._vcWallMatherial;
			}
			set
			{
				if ((this._vcWallMatherial != value))
				{
					this.OnvcWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._vcWallMatherial = value;
					this.SendPropertyChanged("vcWallMatherial");
					this.OnvcWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idWallMatherial", OtherKey="idWallMatherial")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_HousesForSale", Storage="_HousesForSales", ThisKey="idWallMatherial", OtherKey="idWallMatherial")]
		public EntitySet<HousesForSale> HousesForSales
		{
			get
			{
				return this._HousesForSales;
			}
			set
			{
				this._HousesForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_PlacementForSale", Storage="_PlacementForSales", ThisKey="idWallMatherial", OtherKey="idWallMatherial")]
		public EntitySet<PlacementForSale> PlacementForSales
		{
			get
			{
				return this._PlacementForSales;
			}
			set
			{
				this._PlacementForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_RoomsForSale", Storage="_RoomsForSales", ThisKey="idWallMatherial", OtherKey="idWallMatherial")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = null;
		}
		
		private void attach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = this;
		}
		
		private void detach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = null;
		}
		
		private void attach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = this;
		}
		
		private void detach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.WallMatherial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppartmentForSale")]
	public partial class AppartmentForSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAppartmentForSale;
		
		private System.Nullable<int> _idDistrict;
		
		private System.Nullable<int> _iRoomsAmount;
		
		private System.Nullable<int> _idStreet;
		
		private string _vcHouseNumber;
		
		private System.Nullable<int> _iFloor;
		
		private System.Nullable<int> _iFloors;
		
		private System.Nullable<int> _idPlane;
		
		private System.Nullable<int> _idWallMatherial;
		
		private System.Nullable<decimal> _iAllArea;
		
		private System.Nullable<decimal> _iLivArea;
		
		private System.Nullable<decimal> _iKitchenArea;
		
		private System.Nullable<int> _idBalcony;
		
		private System.Nullable<int> _idSanUsel;
		
		private string _vcComment;
		
		private System.Nullable<int> _iPrice;
		
		private System.Nullable<int> _idRielter;
		
		private System.Nullable<bool> _bActual;
		
		private System.Nullable<System.DateTime> _DateOfAdd;
		
		private System.Nullable<int> _idVariant;
		
		private System.Nullable<bool> _bVideo;
		
		private System.Nullable<bool> _bVdvReclam;
		
		private System.Nullable<bool> _bDominoReclam;
		
		private System.Nullable<char> _cHightFloor;
		
		private EntityRef<WallMatherial> _WallMatherial;
		
		private EntityRef<Balcony> _Balcony;
		
		private EntityRef<District> _District;
		
		private EntityRef<Planing> _Planing;
		
		private EntityRef<Rielter> _Rielter;
		
		private EntityRef<SanUsel> _SanUsel;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<Variant> _Variant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAppartmentForSaleChanging(int value);
    partial void OnidAppartmentForSaleChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OniRoomsAmountChanging(System.Nullable<int> value);
    partial void OniRoomsAmountChanged();
    partial void OnidStreetChanging(System.Nullable<int> value);
    partial void OnidStreetChanged();
    partial void OnvcHouseNumberChanging(string value);
    partial void OnvcHouseNumberChanged();
    partial void OniFloorChanging(System.Nullable<int> value);
    partial void OniFloorChanged();
    partial void OniFloorsChanging(System.Nullable<int> value);
    partial void OniFloorsChanged();
    partial void OnidPlaneChanging(System.Nullable<int> value);
    partial void OnidPlaneChanged();
    partial void OnidWallMatherialChanging(System.Nullable<int> value);
    partial void OnidWallMatherialChanged();
    partial void OniAllAreaChanging(System.Nullable<decimal> value);
    partial void OniAllAreaChanged();
    partial void OniLivAreaChanging(System.Nullable<decimal> value);
    partial void OniLivAreaChanged();
    partial void OniKitchenAreaChanging(System.Nullable<decimal> value);
    partial void OniKitchenAreaChanged();
    partial void OnidBalconyChanging(System.Nullable<int> value);
    partial void OnidBalconyChanged();
    partial void OnidSanUselChanging(System.Nullable<int> value);
    partial void OnidSanUselChanged();
    partial void OnvcCommentChanging(string value);
    partial void OnvcCommentChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnidRielterChanging(System.Nullable<int> value);
    partial void OnidRielterChanged();
    partial void OnbActualChanging(System.Nullable<bool> value);
    partial void OnbActualChanged();
    partial void OnDateOfAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddChanged();
    partial void OnidVariantChanging(System.Nullable<int> value);
    partial void OnidVariantChanged();
    partial void OnbVideoChanging(System.Nullable<bool> value);
    partial void OnbVideoChanged();
    partial void OnbVdvReclamChanging(System.Nullable<bool> value);
    partial void OnbVdvReclamChanged();
    partial void OnbDominoReclamChanging(System.Nullable<bool> value);
    partial void OnbDominoReclamChanged();
    partial void OncHightFloorChanging(System.Nullable<char> value);
    partial void OncHightFloorChanged();
    #endregion
		
		public AppartmentForSale()
		{
			this._WallMatherial = default(EntityRef<WallMatherial>);
			this._Balcony = default(EntityRef<Balcony>);
			this._District = default(EntityRef<District>);
			this._Planing = default(EntityRef<Planing>);
			this._Rielter = default(EntityRef<Rielter>);
			this._SanUsel = default(EntityRef<SanUsel>);
			this._Street = default(EntityRef<Street>);
			this._Variant = default(EntityRef<Variant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAppartmentForSale", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAppartmentForSale
		{
			get
			{
				return this._idAppartmentForSale;
			}
			set
			{
				if ((this._idAppartmentForSale != value))
				{
					this.OnidAppartmentForSaleChanging(value);
					this.SendPropertyChanging();
					this._idAppartmentForSale = value;
					this.SendPropertyChanged("idAppartmentForSale");
					this.OnidAppartmentForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iRoomsAmount", DbType="Int")]
		public System.Nullable<int> iRoomsAmount
		{
			get
			{
				return this._iRoomsAmount;
			}
			set
			{
				if ((this._iRoomsAmount != value))
				{
					this.OniRoomsAmountChanging(value);
					this.SendPropertyChanging();
					this._iRoomsAmount = value;
					this.SendPropertyChanged("iRoomsAmount");
					this.OniRoomsAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", DbType="Int")]
		public System.Nullable<int> idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcHouseNumber", DbType="VarChar(10)")]
		public string vcHouseNumber
		{
			get
			{
				return this._vcHouseNumber;
			}
			set
			{
				if ((this._vcHouseNumber != value))
				{
					this.OnvcHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._vcHouseNumber = value;
					this.SendPropertyChanged("vcHouseNumber");
					this.OnvcHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloor", DbType="Int")]
		public System.Nullable<int> iFloor
		{
			get
			{
				return this._iFloor;
			}
			set
			{
				if ((this._iFloor != value))
				{
					this.OniFloorChanging(value);
					this.SendPropertyChanging();
					this._iFloor = value;
					this.SendPropertyChanged("iFloor");
					this.OniFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloors", DbType="Int")]
		public System.Nullable<int> iFloors
		{
			get
			{
				return this._iFloors;
			}
			set
			{
				if ((this._iFloors != value))
				{
					this.OniFloorsChanging(value);
					this.SendPropertyChanging();
					this._iFloors = value;
					this.SendPropertyChanged("iFloors");
					this.OniFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlane", DbType="Int")]
		public System.Nullable<int> idPlane
		{
			get
			{
				return this._idPlane;
			}
			set
			{
				if ((this._idPlane != value))
				{
					if (this._Planing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPlaneChanging(value);
					this.SendPropertyChanging();
					this._idPlane = value;
					this.SendPropertyChanged("idPlane");
					this.OnidPlaneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWallMatherial", DbType="Int")]
		public System.Nullable<int> idWallMatherial
		{
			get
			{
				return this._idWallMatherial;
			}
			set
			{
				if ((this._idWallMatherial != value))
				{
					if (this._WallMatherial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._idWallMatherial = value;
					this.SendPropertyChanged("idWallMatherial");
					this.OnidWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iAllArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iAllArea
		{
			get
			{
				return this._iAllArea;
			}
			set
			{
				if ((this._iAllArea != value))
				{
					this.OniAllAreaChanging(value);
					this.SendPropertyChanging();
					this._iAllArea = value;
					this.SendPropertyChanged("iAllArea");
					this.OniAllAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iLivArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iLivArea
		{
			get
			{
				return this._iLivArea;
			}
			set
			{
				if ((this._iLivArea != value))
				{
					this.OniLivAreaChanging(value);
					this.SendPropertyChanging();
					this._iLivArea = value;
					this.SendPropertyChanged("iLivArea");
					this.OniLivAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iKitchenArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iKitchenArea
		{
			get
			{
				return this._iKitchenArea;
			}
			set
			{
				if ((this._iKitchenArea != value))
				{
					this.OniKitchenAreaChanging(value);
					this.SendPropertyChanging();
					this._iKitchenArea = value;
					this.SendPropertyChanged("iKitchenArea");
					this.OniKitchenAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBalcony", DbType="Int")]
		public System.Nullable<int> idBalcony
		{
			get
			{
				return this._idBalcony;
			}
			set
			{
				if ((this._idBalcony != value))
				{
					if (this._Balcony.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBalconyChanging(value);
					this.SendPropertyChanging();
					this._idBalcony = value;
					this.SendPropertyChanged("idBalcony");
					this.OnidBalconyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSanUsel", DbType="Int")]
		public System.Nullable<int> idSanUsel
		{
			get
			{
				return this._idSanUsel;
			}
			set
			{
				if ((this._idSanUsel != value))
				{
					if (this._SanUsel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSanUselChanging(value);
					this.SendPropertyChanging();
					this._idSanUsel = value;
					this.SendPropertyChanged("idSanUsel");
					this.OnidSanUselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComment", DbType="VarChar(200)")]
		public string vcComment
		{
			get
			{
				return this._vcComment;
			}
			set
			{
				if ((this._vcComment != value))
				{
					this.OnvcCommentChanging(value);
					this.SendPropertyChanging();
					this._vcComment = value;
					this.SendPropertyChanged("vcComment");
					this.OnvcCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", DbType="Int")]
		public System.Nullable<int> idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					if (this._Rielter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActual", DbType="Bit")]
		public System.Nullable<bool> bActual
		{
			get
			{
				return this._bActual;
			}
			set
			{
				if ((this._bActual != value))
				{
					this.OnbActualChanging(value);
					this.SendPropertyChanging();
					this._bActual = value;
					this.SendPropertyChanged("bActual");
					this.OnbActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", DbType="Int")]
		public System.Nullable<int> idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVideo", DbType="Bit")]
		public System.Nullable<bool> bVideo
		{
			get
			{
				return this._bVideo;
			}
			set
			{
				if ((this._bVideo != value))
				{
					this.OnbVideoChanging(value);
					this.SendPropertyChanging();
					this._bVideo = value;
					this.SendPropertyChanged("bVideo");
					this.OnbVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVdvReclam", DbType="Bit")]
		public System.Nullable<bool> bVdvReclam
		{
			get
			{
				return this._bVdvReclam;
			}
			set
			{
				if ((this._bVdvReclam != value))
				{
					this.OnbVdvReclamChanging(value);
					this.SendPropertyChanging();
					this._bVdvReclam = value;
					this.SendPropertyChanged("bVdvReclam");
					this.OnbVdvReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDominoReclam", DbType="Bit")]
		public System.Nullable<bool> bDominoReclam
		{
			get
			{
				return this._bDominoReclam;
			}
			set
			{
				if ((this._bDominoReclam != value))
				{
					this.OnbDominoReclamChanging(value);
					this.SendPropertyChanging();
					this._bDominoReclam = value;
					this.SendPropertyChanged("bDominoReclam");
					this.OnbDominoReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cHightFloor", DbType="Char(1)")]
		public System.Nullable<char> cHightFloor
		{
			get
			{
				return this._cHightFloor;
			}
			set
			{
				if ((this._cHightFloor != value))
				{
					this.OncHightFloorChanging(value);
					this.SendPropertyChanging();
					this._cHightFloor = value;
					this.SendPropertyChanged("cHightFloor");
					this.OncHightFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_AppartmentForSale", Storage="_WallMatherial", ThisKey="idWallMatherial", OtherKey="idWallMatherial", IsForeignKey=true)]
		public WallMatherial WallMatherial
		{
			get
			{
				return this._WallMatherial.Entity;
			}
			set
			{
				WallMatherial previousValue = this._WallMatherial.Entity;
				if (((previousValue != value) 
							|| (this._WallMatherial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WallMatherial.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._WallMatherial.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idWallMatherial = value.idWallMatherial;
					}
					else
					{
						this._idWallMatherial = default(Nullable<int>);
					}
					this.SendPropertyChanged("WallMatherial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Balcony_AppartmentForSale", Storage="_Balcony", ThisKey="idBalcony", OtherKey="idBalcony", IsForeignKey=true)]
		public Balcony Balcony
		{
			get
			{
				return this._Balcony.Entity;
			}
			set
			{
				Balcony previousValue = this._Balcony.Entity;
				if (((previousValue != value) 
							|| (this._Balcony.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Balcony.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._Balcony.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idBalcony = value.idBalcony;
					}
					else
					{
						this._idBalcony = default(Nullable<int>);
					}
					this.SendPropertyChanged("Balcony");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_AppartmentForSale", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Planing_AppartmentForSale", Storage="_Planing", ThisKey="idPlane", OtherKey="idPlaning", IsForeignKey=true)]
		public Planing Planing
		{
			get
			{
				return this._Planing.Entity;
			}
			set
			{
				Planing previousValue = this._Planing.Entity;
				if (((previousValue != value) 
							|| (this._Planing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Planing.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._Planing.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idPlane = value.idPlaning;
					}
					else
					{
						this._idPlane = default(Nullable<int>);
					}
					this.SendPropertyChanged("Planing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_AppartmentForSale", Storage="_Rielter", ThisKey="idRielter", OtherKey="idRielter", IsForeignKey=true)]
		public Rielter Rielter
		{
			get
			{
				return this._Rielter.Entity;
			}
			set
			{
				Rielter previousValue = this._Rielter.Entity;
				if (((previousValue != value) 
							|| (this._Rielter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rielter.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._Rielter.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idRielter = value.idRielter;
					}
					else
					{
						this._idRielter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rielter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SanUsel_AppartmentForSale", Storage="_SanUsel", ThisKey="idSanUsel", OtherKey="idSanUsel", IsForeignKey=true)]
		public SanUsel SanUsel
		{
			get
			{
				return this._SanUsel.Entity;
			}
			set
			{
				SanUsel previousValue = this._SanUsel.Entity;
				if (((previousValue != value) 
							|| (this._SanUsel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SanUsel.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._SanUsel.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idSanUsel = value.idSanUsel;
					}
					else
					{
						this._idSanUsel = default(Nullable<int>);
					}
					this.SendPropertyChanged("SanUsel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_AppartmentForSale", Storage="_Street", ThisKey="idStreet", OtherKey="idStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idStreet = value.idStreet;
					}
					else
					{
						this._idStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_AppartmentForSale", Storage="_Variant", ThisKey="idVariant", OtherKey="idVariant", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.AppartmentForSales.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.AppartmentForSales.Add(this);
						this._idVariant = value.idVariant;
					}
					else
					{
						this._idVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Balcony")]
	public partial class Balcony : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idBalcony;
		
		private string _vcBalcony;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBalconyChanging(int value);
    partial void OnidBalconyChanged();
    partial void OnvcBalconyChanging(string value);
    partial void OnvcBalconyChanged();
    #endregion
		
		public Balcony()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBalcony", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idBalcony
		{
			get
			{
				return this._idBalcony;
			}
			set
			{
				if ((this._idBalcony != value))
				{
					this.OnidBalconyChanging(value);
					this.SendPropertyChanging();
					this._idBalcony = value;
					this.SendPropertyChanged("idBalcony");
					this.OnidBalconyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcBalcony", DbType="VarChar(50)")]
		public string vcBalcony
		{
			get
			{
				return this._vcBalcony;
			}
			set
			{
				if ((this._vcBalcony != value))
				{
					this.OnvcBalconyChanging(value);
					this.SendPropertyChanging();
					this._vcBalcony = value;
					this.SendPropertyChanged("vcBalcony");
					this.OnvcBalconyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Balcony_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idBalcony", OtherKey="idBalcony")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Balcony_RoomsForSale", Storage="_RoomsForSales", ThisKey="idBalcony", OtherKey="idBalcony")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Balcony = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Balcony = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Balcony = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Balcony = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDistrict;
		
		private string _vcDistrict;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<HomestadForSale> _HomestadForSales;
		
		private EntitySet<HousesForSale> _HousesForSales;
		
		private EntitySet<PlacementForSale> _PlacementForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
		private EntitySet<Street> _Streets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDistrictChanging(int value);
    partial void OnidDistrictChanged();
    partial void OnvcDistrictChanging(string value);
    partial void OnvcDistrictChanged();
    #endregion
		
		public District()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._HomestadForSales = new EntitySet<HomestadForSale>(new Action<HomestadForSale>(this.attach_HomestadForSales), new Action<HomestadForSale>(this.detach_HomestadForSales));
			this._HousesForSales = new EntitySet<HousesForSale>(new Action<HousesForSale>(this.attach_HousesForSales), new Action<HousesForSale>(this.detach_HousesForSales));
			this._PlacementForSales = new EntitySet<PlacementForSale>(new Action<PlacementForSale>(this.attach_PlacementForSales), new Action<PlacementForSale>(this.detach_PlacementForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			this._Streets = new EntitySet<Street>(new Action<Street>(this.attach_Streets), new Action<Street>(this.detach_Streets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcDistrict", DbType="VarChar(30)")]
		public string vcDistrict
		{
			get
			{
				return this._vcDistrict;
			}
			set
			{
				if ((this._vcDistrict != value))
				{
					this.OnvcDistrictChanging(value);
					this.SendPropertyChanging();
					this._vcDistrict = value;
					this.SendPropertyChanged("vcDistrict");
					this.OnvcDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_HomestadForSale", Storage="_HomestadForSales", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<HomestadForSale> HomestadForSales
		{
			get
			{
				return this._HomestadForSales;
			}
			set
			{
				this._HomestadForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_HousesForSale", Storage="_HousesForSales", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<HousesForSale> HousesForSales
		{
			get
			{
				return this._HousesForSales;
			}
			set
			{
				this._HousesForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_PlacementForSale", Storage="_PlacementForSales", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<PlacementForSale> PlacementForSales
		{
			get
			{
				return this._PlacementForSales;
			}
			set
			{
				this._PlacementForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_RoomsForSale", Storage="_RoomsForSales", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Street", Storage="_Streets", ThisKey="idDistrict", OtherKey="idDistrict")]
		public EntitySet<Street> Streets
		{
			get
			{
				return this._Streets;
			}
			set
			{
				this._Streets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomestadForSale")]
	public partial class HomestadForSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idHomestadForSale;
		
		private System.Nullable<int> _idDistrict;
		
		private System.Nullable<int> _idStreet;
		
		private string _vcHouseNumber;
		
		private System.Nullable<decimal> _iArea;
		
		private string _vcComment;
		
		private System.Nullable<int> _iPrice;
		
		private System.Nullable<int> _idRielter;
		
		private System.Nullable<bool> _bActual;
		
		private System.Nullable<System.DateTime> _DateOfAdd;
		
		private System.Nullable<int> _idVariant;
		
		private System.Nullable<bool> _bVideo;
		
		private System.Nullable<bool> _bVdvReclam;
		
		private System.Nullable<bool> _bDominoReclam;
		
		private EntityRef<District> _District;
		
		private EntityRef<Rielter> _Rielter;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<Variant> _Variant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidHomestadForSaleChanging(int value);
    partial void OnidHomestadForSaleChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OnidStreetChanging(System.Nullable<int> value);
    partial void OnidStreetChanged();
    partial void OnvcHouseNumberChanging(string value);
    partial void OnvcHouseNumberChanged();
    partial void OniAreaChanging(System.Nullable<decimal> value);
    partial void OniAreaChanged();
    partial void OnvcCommentChanging(string value);
    partial void OnvcCommentChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnidRielterChanging(System.Nullable<int> value);
    partial void OnidRielterChanged();
    partial void OnbActualChanging(System.Nullable<bool> value);
    partial void OnbActualChanged();
    partial void OnDateOfAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddChanged();
    partial void OnidVariantChanging(System.Nullable<int> value);
    partial void OnidVariantChanged();
    partial void OnbVideoChanging(System.Nullable<bool> value);
    partial void OnbVideoChanged();
    partial void OnbVdvReclamChanging(System.Nullable<bool> value);
    partial void OnbVdvReclamChanged();
    partial void OnbDominoReclamChanging(System.Nullable<bool> value);
    partial void OnbDominoReclamChanged();
    #endregion
		
		public HomestadForSale()
		{
			this._District = default(EntityRef<District>);
			this._Rielter = default(EntityRef<Rielter>);
			this._Street = default(EntityRef<Street>);
			this._Variant = default(EntityRef<Variant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHomestadForSale", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idHomestadForSale
		{
			get
			{
				return this._idHomestadForSale;
			}
			set
			{
				if ((this._idHomestadForSale != value))
				{
					this.OnidHomestadForSaleChanging(value);
					this.SendPropertyChanging();
					this._idHomestadForSale = value;
					this.SendPropertyChanged("idHomestadForSale");
					this.OnidHomestadForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", DbType="Int")]
		public System.Nullable<int> idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcHouseNumber", DbType="VarChar(10)")]
		public string vcHouseNumber
		{
			get
			{
				return this._vcHouseNumber;
			}
			set
			{
				if ((this._vcHouseNumber != value))
				{
					this.OnvcHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._vcHouseNumber = value;
					this.SendPropertyChanged("vcHouseNumber");
					this.OnvcHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iArea
		{
			get
			{
				return this._iArea;
			}
			set
			{
				if ((this._iArea != value))
				{
					this.OniAreaChanging(value);
					this.SendPropertyChanging();
					this._iArea = value;
					this.SendPropertyChanged("iArea");
					this.OniAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComment", DbType="VarChar(200)")]
		public string vcComment
		{
			get
			{
				return this._vcComment;
			}
			set
			{
				if ((this._vcComment != value))
				{
					this.OnvcCommentChanging(value);
					this.SendPropertyChanging();
					this._vcComment = value;
					this.SendPropertyChanged("vcComment");
					this.OnvcCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", DbType="Int")]
		public System.Nullable<int> idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					if (this._Rielter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActual", DbType="Bit")]
		public System.Nullable<bool> bActual
		{
			get
			{
				return this._bActual;
			}
			set
			{
				if ((this._bActual != value))
				{
					this.OnbActualChanging(value);
					this.SendPropertyChanging();
					this._bActual = value;
					this.SendPropertyChanged("bActual");
					this.OnbActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", DbType="Int")]
		public System.Nullable<int> idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVideo", DbType="Bit")]
		public System.Nullable<bool> bVideo
		{
			get
			{
				return this._bVideo;
			}
			set
			{
				if ((this._bVideo != value))
				{
					this.OnbVideoChanging(value);
					this.SendPropertyChanging();
					this._bVideo = value;
					this.SendPropertyChanged("bVideo");
					this.OnbVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVdvReclam", DbType="Bit")]
		public System.Nullable<bool> bVdvReclam
		{
			get
			{
				return this._bVdvReclam;
			}
			set
			{
				if ((this._bVdvReclam != value))
				{
					this.OnbVdvReclamChanging(value);
					this.SendPropertyChanging();
					this._bVdvReclam = value;
					this.SendPropertyChanged("bVdvReclam");
					this.OnbVdvReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDominoReclam", DbType="Bit")]
		public System.Nullable<bool> bDominoReclam
		{
			get
			{
				return this._bDominoReclam;
			}
			set
			{
				if ((this._bDominoReclam != value))
				{
					this.OnbDominoReclamChanging(value);
					this.SendPropertyChanging();
					this._bDominoReclam = value;
					this.SendPropertyChanged("bDominoReclam");
					this.OnbDominoReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_HomestadForSale", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.HomestadForSales.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.HomestadForSales.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_HomestadForSale", Storage="_Rielter", ThisKey="idRielter", OtherKey="idRielter", IsForeignKey=true)]
		public Rielter Rielter
		{
			get
			{
				return this._Rielter.Entity;
			}
			set
			{
				Rielter previousValue = this._Rielter.Entity;
				if (((previousValue != value) 
							|| (this._Rielter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rielter.Entity = null;
						previousValue.HomestadForSales.Remove(this);
					}
					this._Rielter.Entity = value;
					if ((value != null))
					{
						value.HomestadForSales.Add(this);
						this._idRielter = value.idRielter;
					}
					else
					{
						this._idRielter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rielter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_HomestadForSale", Storage="_Street", ThisKey="idStreet", OtherKey="idStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.HomestadForSales.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.HomestadForSales.Add(this);
						this._idStreet = value.idStreet;
					}
					else
					{
						this._idStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_HomestadForSale", Storage="_Variant", ThisKey="idVariant", OtherKey="idVariant", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.HomestadForSales.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.HomestadForSales.Add(this);
						this._idVariant = value.idVariant;
					}
					else
					{
						this._idVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HousesForSale")]
	public partial class HousesForSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idHousesForSale;
		
		private System.Nullable<int> _idDistrict;
		
		private System.Nullable<int> _idStreet;
		
		private string _vcHouseNumber;
		
		private System.Nullable<int> _iFloors;
		
		private System.Nullable<int> _idWallMatherial;
		
		private System.Nullable<decimal> _iHouseArea;
		
		private System.Nullable<decimal> _iLandArea;
		
		private string _vcComment;
		
		private System.Nullable<int> _iPrice;
		
		private System.Nullable<int> _idRielter;
		
		private System.Nullable<bool> _bActual;
		
		private System.Nullable<System.DateTime> _DateOfAdd;
		
		private System.Nullable<int> _idVariant;
		
		private System.Nullable<bool> _bVideo;
		
		private System.Nullable<bool> _bVdvReclam;
		
		private System.Nullable<bool> _bDominoReclam;
		
		private EntityRef<District> _District;
		
		private EntityRef<WallMatherial> _WallMatherial;
		
		private EntityRef<Rielter> _Rielter;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<Variant> _Variant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidHousesForSaleChanging(int value);
    partial void OnidHousesForSaleChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OnidStreetChanging(System.Nullable<int> value);
    partial void OnidStreetChanged();
    partial void OnvcHouseNumberChanging(string value);
    partial void OnvcHouseNumberChanged();
    partial void OniFloorsChanging(System.Nullable<int> value);
    partial void OniFloorsChanged();
    partial void OnidWallMatherialChanging(System.Nullable<int> value);
    partial void OnidWallMatherialChanged();
    partial void OniHouseAreaChanging(System.Nullable<decimal> value);
    partial void OniHouseAreaChanged();
    partial void OniLandAreaChanging(System.Nullable<decimal> value);
    partial void OniLandAreaChanged();
    partial void OnvcCommentChanging(string value);
    partial void OnvcCommentChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnidRielterChanging(System.Nullable<int> value);
    partial void OnidRielterChanged();
    partial void OnbActualChanging(System.Nullable<bool> value);
    partial void OnbActualChanged();
    partial void OnDateOfAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddChanged();
    partial void OnidVariantChanging(System.Nullable<int> value);
    partial void OnidVariantChanged();
    partial void OnbVideoChanging(System.Nullable<bool> value);
    partial void OnbVideoChanged();
    partial void OnbVdvReclamChanging(System.Nullable<bool> value);
    partial void OnbVdvReclamChanged();
    partial void OnbDominoReclamChanging(System.Nullable<bool> value);
    partial void OnbDominoReclamChanged();
    #endregion
		
		public HousesForSale()
		{
			this._District = default(EntityRef<District>);
			this._WallMatherial = default(EntityRef<WallMatherial>);
			this._Rielter = default(EntityRef<Rielter>);
			this._Street = default(EntityRef<Street>);
			this._Variant = default(EntityRef<Variant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHousesForSale", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idHousesForSale
		{
			get
			{
				return this._idHousesForSale;
			}
			set
			{
				if ((this._idHousesForSale != value))
				{
					this.OnidHousesForSaleChanging(value);
					this.SendPropertyChanging();
					this._idHousesForSale = value;
					this.SendPropertyChanged("idHousesForSale");
					this.OnidHousesForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", DbType="Int")]
		public System.Nullable<int> idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcHouseNumber", DbType="VarChar(10)")]
		public string vcHouseNumber
		{
			get
			{
				return this._vcHouseNumber;
			}
			set
			{
				if ((this._vcHouseNumber != value))
				{
					this.OnvcHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._vcHouseNumber = value;
					this.SendPropertyChanged("vcHouseNumber");
					this.OnvcHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloors", DbType="Int")]
		public System.Nullable<int> iFloors
		{
			get
			{
				return this._iFloors;
			}
			set
			{
				if ((this._iFloors != value))
				{
					this.OniFloorsChanging(value);
					this.SendPropertyChanging();
					this._iFloors = value;
					this.SendPropertyChanged("iFloors");
					this.OniFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWallMatherial", DbType="Int")]
		public System.Nullable<int> idWallMatherial
		{
			get
			{
				return this._idWallMatherial;
			}
			set
			{
				if ((this._idWallMatherial != value))
				{
					if (this._WallMatherial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._idWallMatherial = value;
					this.SendPropertyChanged("idWallMatherial");
					this.OnidWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iHouseArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iHouseArea
		{
			get
			{
				return this._iHouseArea;
			}
			set
			{
				if ((this._iHouseArea != value))
				{
					this.OniHouseAreaChanging(value);
					this.SendPropertyChanging();
					this._iHouseArea = value;
					this.SendPropertyChanged("iHouseArea");
					this.OniHouseAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iLandArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iLandArea
		{
			get
			{
				return this._iLandArea;
			}
			set
			{
				if ((this._iLandArea != value))
				{
					this.OniLandAreaChanging(value);
					this.SendPropertyChanging();
					this._iLandArea = value;
					this.SendPropertyChanged("iLandArea");
					this.OniLandAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComment", DbType="VarChar(200)")]
		public string vcComment
		{
			get
			{
				return this._vcComment;
			}
			set
			{
				if ((this._vcComment != value))
				{
					this.OnvcCommentChanging(value);
					this.SendPropertyChanging();
					this._vcComment = value;
					this.SendPropertyChanged("vcComment");
					this.OnvcCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", DbType="Int")]
		public System.Nullable<int> idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					if (this._Rielter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActual", DbType="Bit")]
		public System.Nullable<bool> bActual
		{
			get
			{
				return this._bActual;
			}
			set
			{
				if ((this._bActual != value))
				{
					this.OnbActualChanging(value);
					this.SendPropertyChanging();
					this._bActual = value;
					this.SendPropertyChanged("bActual");
					this.OnbActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", DbType="Int")]
		public System.Nullable<int> idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVideo", DbType="Bit")]
		public System.Nullable<bool> bVideo
		{
			get
			{
				return this._bVideo;
			}
			set
			{
				if ((this._bVideo != value))
				{
					this.OnbVideoChanging(value);
					this.SendPropertyChanging();
					this._bVideo = value;
					this.SendPropertyChanged("bVideo");
					this.OnbVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVdvReclam", DbType="Bit")]
		public System.Nullable<bool> bVdvReclam
		{
			get
			{
				return this._bVdvReclam;
			}
			set
			{
				if ((this._bVdvReclam != value))
				{
					this.OnbVdvReclamChanging(value);
					this.SendPropertyChanging();
					this._bVdvReclam = value;
					this.SendPropertyChanged("bVdvReclam");
					this.OnbVdvReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDominoReclam", DbType="Bit")]
		public System.Nullable<bool> bDominoReclam
		{
			get
			{
				return this._bDominoReclam;
			}
			set
			{
				if ((this._bDominoReclam != value))
				{
					this.OnbDominoReclamChanging(value);
					this.SendPropertyChanging();
					this._bDominoReclam = value;
					this.SendPropertyChanged("bDominoReclam");
					this.OnbDominoReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_HousesForSale", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.HousesForSales.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.HousesForSales.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_HousesForSale", Storage="_WallMatherial", ThisKey="idWallMatherial", OtherKey="idWallMatherial", IsForeignKey=true)]
		public WallMatherial WallMatherial
		{
			get
			{
				return this._WallMatherial.Entity;
			}
			set
			{
				WallMatherial previousValue = this._WallMatherial.Entity;
				if (((previousValue != value) 
							|| (this._WallMatherial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WallMatherial.Entity = null;
						previousValue.HousesForSales.Remove(this);
					}
					this._WallMatherial.Entity = value;
					if ((value != null))
					{
						value.HousesForSales.Add(this);
						this._idWallMatherial = value.idWallMatherial;
					}
					else
					{
						this._idWallMatherial = default(Nullable<int>);
					}
					this.SendPropertyChanged("WallMatherial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_HousesForSale", Storage="_Rielter", ThisKey="idRielter", OtherKey="idRielter", IsForeignKey=true)]
		public Rielter Rielter
		{
			get
			{
				return this._Rielter.Entity;
			}
			set
			{
				Rielter previousValue = this._Rielter.Entity;
				if (((previousValue != value) 
							|| (this._Rielter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rielter.Entity = null;
						previousValue.HousesForSales.Remove(this);
					}
					this._Rielter.Entity = value;
					if ((value != null))
					{
						value.HousesForSales.Add(this);
						this._idRielter = value.idRielter;
					}
					else
					{
						this._idRielter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rielter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_HousesForSale", Storage="_Street", ThisKey="idStreet", OtherKey="idStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.HousesForSales.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.HousesForSales.Add(this);
						this._idStreet = value.idStreet;
					}
					else
					{
						this._idStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_HousesForSale", Storage="_Variant", ThisKey="idVariant", OtherKey="idVariant", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.HousesForSales.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.HousesForSales.Add(this);
						this._idVariant = value.idVariant;
					}
					else
					{
						this._idVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlacementForSale")]
	public partial class PlacementForSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPlacementForSale;
		
		private System.Nullable<int> _idDistrict;
		
		private System.Nullable<int> _idStreet;
		
		private string _vcHouseNumber;
		
		private System.Nullable<int> _iFloor;
		
		private System.Nullable<int> _iFloors;
		
		private System.Nullable<int> _idWallMatherial;
		
		private System.Nullable<decimal> _iPlaceArea;
		
		private string _vcComment;
		
		private System.Nullable<int> _iPrice;
		
		private System.Nullable<int> _idRielter;
		
		private System.Nullable<bool> _bActual;
		
		private System.Nullable<System.DateTime> _DateOfAdd;
		
		private System.Nullable<int> _idVariant;
		
		private System.Nullable<bool> _bVideo;
		
		private System.Nullable<bool> _bVdvReclam;
		
		private System.Nullable<bool> _bDominoReclam;
		
		private EntityRef<District> _District;
		
		private EntityRef<WallMatherial> _WallMatherial;
		
		private EntityRef<Rielter> _Rielter;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<Variant> _Variant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPlacementForSaleChanging(int value);
    partial void OnidPlacementForSaleChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OnidStreetChanging(System.Nullable<int> value);
    partial void OnidStreetChanged();
    partial void OnvcHouseNumberChanging(string value);
    partial void OnvcHouseNumberChanged();
    partial void OniFloorChanging(System.Nullable<int> value);
    partial void OniFloorChanged();
    partial void OniFloorsChanging(System.Nullable<int> value);
    partial void OniFloorsChanged();
    partial void OnidWallMatherialChanging(System.Nullable<int> value);
    partial void OnidWallMatherialChanged();
    partial void OniPlaceAreaChanging(System.Nullable<decimal> value);
    partial void OniPlaceAreaChanged();
    partial void OnvcCommentChanging(string value);
    partial void OnvcCommentChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnidRielterChanging(System.Nullable<int> value);
    partial void OnidRielterChanged();
    partial void OnbActualChanging(System.Nullable<bool> value);
    partial void OnbActualChanged();
    partial void OnDateOfAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddChanged();
    partial void OnidVariantChanging(System.Nullable<int> value);
    partial void OnidVariantChanged();
    partial void OnbVideoChanging(System.Nullable<bool> value);
    partial void OnbVideoChanged();
    partial void OnbVdvReclamChanging(System.Nullable<bool> value);
    partial void OnbVdvReclamChanged();
    partial void OnbDominoReclamChanging(System.Nullable<bool> value);
    partial void OnbDominoReclamChanged();
    #endregion
		
		public PlacementForSale()
		{
			this._District = default(EntityRef<District>);
			this._WallMatherial = default(EntityRef<WallMatherial>);
			this._Rielter = default(EntityRef<Rielter>);
			this._Street = default(EntityRef<Street>);
			this._Variant = default(EntityRef<Variant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlacementForSale", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPlacementForSale
		{
			get
			{
				return this._idPlacementForSale;
			}
			set
			{
				if ((this._idPlacementForSale != value))
				{
					this.OnidPlacementForSaleChanging(value);
					this.SendPropertyChanging();
					this._idPlacementForSale = value;
					this.SendPropertyChanged("idPlacementForSale");
					this.OnidPlacementForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", DbType="Int")]
		public System.Nullable<int> idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcHouseNumber", DbType="VarChar(10)")]
		public string vcHouseNumber
		{
			get
			{
				return this._vcHouseNumber;
			}
			set
			{
				if ((this._vcHouseNumber != value))
				{
					this.OnvcHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._vcHouseNumber = value;
					this.SendPropertyChanged("vcHouseNumber");
					this.OnvcHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloor", DbType="Int")]
		public System.Nullable<int> iFloor
		{
			get
			{
				return this._iFloor;
			}
			set
			{
				if ((this._iFloor != value))
				{
					this.OniFloorChanging(value);
					this.SendPropertyChanging();
					this._iFloor = value;
					this.SendPropertyChanged("iFloor");
					this.OniFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloors", DbType="Int")]
		public System.Nullable<int> iFloors
		{
			get
			{
				return this._iFloors;
			}
			set
			{
				if ((this._iFloors != value))
				{
					this.OniFloorsChanging(value);
					this.SendPropertyChanging();
					this._iFloors = value;
					this.SendPropertyChanged("iFloors");
					this.OniFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWallMatherial", DbType="Int")]
		public System.Nullable<int> idWallMatherial
		{
			get
			{
				return this._idWallMatherial;
			}
			set
			{
				if ((this._idWallMatherial != value))
				{
					if (this._WallMatherial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._idWallMatherial = value;
					this.SendPropertyChanged("idWallMatherial");
					this.OnidWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPlaceArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iPlaceArea
		{
			get
			{
				return this._iPlaceArea;
			}
			set
			{
				if ((this._iPlaceArea != value))
				{
					this.OniPlaceAreaChanging(value);
					this.SendPropertyChanging();
					this._iPlaceArea = value;
					this.SendPropertyChanged("iPlaceArea");
					this.OniPlaceAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComment", DbType="VarChar(200)")]
		public string vcComment
		{
			get
			{
				return this._vcComment;
			}
			set
			{
				if ((this._vcComment != value))
				{
					this.OnvcCommentChanging(value);
					this.SendPropertyChanging();
					this._vcComment = value;
					this.SendPropertyChanged("vcComment");
					this.OnvcCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", DbType="Int")]
		public System.Nullable<int> idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					if (this._Rielter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActual", DbType="Bit")]
		public System.Nullable<bool> bActual
		{
			get
			{
				return this._bActual;
			}
			set
			{
				if ((this._bActual != value))
				{
					this.OnbActualChanging(value);
					this.SendPropertyChanging();
					this._bActual = value;
					this.SendPropertyChanged("bActual");
					this.OnbActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", DbType="Int")]
		public System.Nullable<int> idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVideo", DbType="Bit")]
		public System.Nullable<bool> bVideo
		{
			get
			{
				return this._bVideo;
			}
			set
			{
				if ((this._bVideo != value))
				{
					this.OnbVideoChanging(value);
					this.SendPropertyChanging();
					this._bVideo = value;
					this.SendPropertyChanged("bVideo");
					this.OnbVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVdvReclam", DbType="Bit")]
		public System.Nullable<bool> bVdvReclam
		{
			get
			{
				return this._bVdvReclam;
			}
			set
			{
				if ((this._bVdvReclam != value))
				{
					this.OnbVdvReclamChanging(value);
					this.SendPropertyChanging();
					this._bVdvReclam = value;
					this.SendPropertyChanged("bVdvReclam");
					this.OnbVdvReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDominoReclam", DbType="Bit")]
		public System.Nullable<bool> bDominoReclam
		{
			get
			{
				return this._bDominoReclam;
			}
			set
			{
				if ((this._bDominoReclam != value))
				{
					this.OnbDominoReclamChanging(value);
					this.SendPropertyChanging();
					this._bDominoReclam = value;
					this.SendPropertyChanged("bDominoReclam");
					this.OnbDominoReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_PlacementForSale", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.PlacementForSales.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.PlacementForSales.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_PlacementForSale", Storage="_WallMatherial", ThisKey="idWallMatherial", OtherKey="idWallMatherial", IsForeignKey=true)]
		public WallMatherial WallMatherial
		{
			get
			{
				return this._WallMatherial.Entity;
			}
			set
			{
				WallMatherial previousValue = this._WallMatherial.Entity;
				if (((previousValue != value) 
							|| (this._WallMatherial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WallMatherial.Entity = null;
						previousValue.PlacementForSales.Remove(this);
					}
					this._WallMatherial.Entity = value;
					if ((value != null))
					{
						value.PlacementForSales.Add(this);
						this._idWallMatherial = value.idWallMatherial;
					}
					else
					{
						this._idWallMatherial = default(Nullable<int>);
					}
					this.SendPropertyChanged("WallMatherial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_PlacementForSale", Storage="_Rielter", ThisKey="idRielter", OtherKey="idRielter", IsForeignKey=true)]
		public Rielter Rielter
		{
			get
			{
				return this._Rielter.Entity;
			}
			set
			{
				Rielter previousValue = this._Rielter.Entity;
				if (((previousValue != value) 
							|| (this._Rielter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rielter.Entity = null;
						previousValue.PlacementForSales.Remove(this);
					}
					this._Rielter.Entity = value;
					if ((value != null))
					{
						value.PlacementForSales.Add(this);
						this._idRielter = value.idRielter;
					}
					else
					{
						this._idRielter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rielter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_PlacementForSale", Storage="_Street", ThisKey="idStreet", OtherKey="idStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.PlacementForSales.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.PlacementForSales.Add(this);
						this._idStreet = value.idStreet;
					}
					else
					{
						this._idStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_PlacementForSale", Storage="_Variant", ThisKey="idVariant", OtherKey="idVariant", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.PlacementForSales.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.PlacementForSales.Add(this);
						this._idVariant = value.idVariant;
					}
					else
					{
						this._idVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Planing")]
	public partial class Planing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPlaning;
		
		private string _vcPlaning;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPlaningChanging(int value);
    partial void OnidPlaningChanged();
    partial void OnvcPlaningChanging(string value);
    partial void OnvcPlaningChanged();
    #endregion
		
		public Planing()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlaning", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPlaning
		{
			get
			{
				return this._idPlaning;
			}
			set
			{
				if ((this._idPlaning != value))
				{
					this.OnidPlaningChanging(value);
					this.SendPropertyChanging();
					this._idPlaning = value;
					this.SendPropertyChanged("idPlaning");
					this.OnidPlaningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcPlaning", DbType="VarChar(50)")]
		public string vcPlaning
		{
			get
			{
				return this._vcPlaning;
			}
			set
			{
				if ((this._vcPlaning != value))
				{
					this.OnvcPlaningChanging(value);
					this.SendPropertyChanging();
					this._vcPlaning = value;
					this.SendPropertyChanged("vcPlaning");
					this.OnvcPlaningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Planing_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idPlaning", OtherKey="idPlane")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Planing_RoomsForSale", Storage="_RoomsForSales", ThisKey="idPlaning", OtherKey="idPlane")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Planing = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Planing = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Planing = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Planing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rielter")]
	public partial class Rielter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRielter;
		
		private string _vcName;
		
		private string _vcContacts;
		
		private System.Nullable<bool> _bActive;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<HomestadForSale> _HomestadForSales;
		
		private EntitySet<HousesForSale> _HousesForSales;
		
		private EntitySet<PlacementForSale> _PlacementForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRielterChanging(int value);
    partial void OnidRielterChanged();
    partial void OnvcNameChanging(string value);
    partial void OnvcNameChanged();
    partial void OnvcContactsChanging(string value);
    partial void OnvcContactsChanged();
    partial void OnbActiveChanging(System.Nullable<bool> value);
    partial void OnbActiveChanged();
    #endregion
		
		public Rielter()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._HomestadForSales = new EntitySet<HomestadForSale>(new Action<HomestadForSale>(this.attach_HomestadForSales), new Action<HomestadForSale>(this.detach_HomestadForSales));
			this._HousesForSales = new EntitySet<HousesForSale>(new Action<HousesForSale>(this.attach_HousesForSales), new Action<HousesForSale>(this.detach_HousesForSales));
			this._PlacementForSales = new EntitySet<PlacementForSale>(new Action<PlacementForSale>(this.attach_PlacementForSales), new Action<PlacementForSale>(this.detach_PlacementForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcName", DbType="VarChar(50)")]
		public string vcName
		{
			get
			{
				return this._vcName;
			}
			set
			{
				if ((this._vcName != value))
				{
					this.OnvcNameChanging(value);
					this.SendPropertyChanging();
					this._vcName = value;
					this.SendPropertyChanged("vcName");
					this.OnvcNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcContacts", DbType="VarChar(100)")]
		public string vcContacts
		{
			get
			{
				return this._vcContacts;
			}
			set
			{
				if ((this._vcContacts != value))
				{
					this.OnvcContactsChanging(value);
					this.SendPropertyChanging();
					this._vcContacts = value;
					this.SendPropertyChanged("vcContacts");
					this.OnvcContactsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActive", DbType="Bit")]
		public System.Nullable<bool> bActive
		{
			get
			{
				return this._bActive;
			}
			set
			{
				if ((this._bActive != value))
				{
					this.OnbActiveChanging(value);
					this.SendPropertyChanging();
					this._bActive = value;
					this.SendPropertyChanged("bActive");
					this.OnbActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idRielter", OtherKey="idRielter")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_HomestadForSale", Storage="_HomestadForSales", ThisKey="idRielter", OtherKey="idRielter")]
		public EntitySet<HomestadForSale> HomestadForSales
		{
			get
			{
				return this._HomestadForSales;
			}
			set
			{
				this._HomestadForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_HousesForSale", Storage="_HousesForSales", ThisKey="idRielter", OtherKey="idRielter")]
		public EntitySet<HousesForSale> HousesForSales
		{
			get
			{
				return this._HousesForSales;
			}
			set
			{
				this._HousesForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_PlacementForSale", Storage="_PlacementForSales", ThisKey="idRielter", OtherKey="idRielter")]
		public EntitySet<PlacementForSale> PlacementForSales
		{
			get
			{
				return this._PlacementForSales;
			}
			set
			{
				this._PlacementForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_RoomsForSale", Storage="_RoomsForSales", ThisKey="idRielter", OtherKey="idRielter")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = null;
		}
		
		private void attach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = this;
		}
		
		private void detach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = null;
		}
		
		private void attach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = this;
		}
		
		private void detach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = null;
		}
		
		private void attach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = this;
		}
		
		private void detach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Rielter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomsForSale")]
	public partial class RoomsForSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRoomsForSale;
		
		private System.Nullable<int> _idDistrict;
		
		private System.Nullable<int> _iRoomsAmount;
		
		private System.Nullable<int> _iRoomsAll;
		
		private System.Nullable<int> _idStreet;
		
		private string _vcHouseNumber;
		
		private System.Nullable<int> _iFloor;
		
		private System.Nullable<int> _iFloors;
		
		private System.Nullable<int> _idPlane;
		
		private System.Nullable<int> _idWallMatherial;
		
		private System.Nullable<decimal> _iAllArea;
		
		private System.Nullable<int> _idBalcony;
		
		private string _vcComment;
		
		private System.Nullable<int> _iPrice;
		
		private System.Nullable<int> _idRielter;
		
		private System.Nullable<bool> _bActual;
		
		private System.Nullable<System.DateTime> _DateOfAdd;
		
		private System.Nullable<int> _idVariant;
		
		private System.Nullable<bool> _bVideo;
		
		private System.Nullable<bool> _bVdvReclam;
		
		private System.Nullable<bool> _bDominoReclam;
		
		private EntityRef<Balcony> _Balcony;
		
		private EntityRef<District> _District;
		
		private EntityRef<Planing> _Planing;
		
		private EntityRef<Rielter> _Rielter;
		
		private EntityRef<WallMatherial> _WallMatherial;
		
		private EntityRef<Street> _Street;
		
		private EntityRef<Variant> _Variant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRoomsForSaleChanging(int value);
    partial void OnidRoomsForSaleChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OniRoomsAmountChanging(System.Nullable<int> value);
    partial void OniRoomsAmountChanged();
    partial void OniRoomsAllChanging(System.Nullable<int> value);
    partial void OniRoomsAllChanged();
    partial void OnidStreetChanging(System.Nullable<int> value);
    partial void OnidStreetChanged();
    partial void OnvcHouseNumberChanging(string value);
    partial void OnvcHouseNumberChanged();
    partial void OniFloorChanging(System.Nullable<int> value);
    partial void OniFloorChanged();
    partial void OniFloorsChanging(System.Nullable<int> value);
    partial void OniFloorsChanged();
    partial void OnidPlaneChanging(System.Nullable<int> value);
    partial void OnidPlaneChanged();
    partial void OnidWallMatherialChanging(System.Nullable<int> value);
    partial void OnidWallMatherialChanged();
    partial void OniAllAreaChanging(System.Nullable<decimal> value);
    partial void OniAllAreaChanged();
    partial void OnidBalconyChanging(System.Nullable<int> value);
    partial void OnidBalconyChanged();
    partial void OnvcCommentChanging(string value);
    partial void OnvcCommentChanged();
    partial void OniPriceChanging(System.Nullable<int> value);
    partial void OniPriceChanged();
    partial void OnidRielterChanging(System.Nullable<int> value);
    partial void OnidRielterChanged();
    partial void OnbActualChanging(System.Nullable<bool> value);
    partial void OnbActualChanged();
    partial void OnDateOfAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddChanged();
    partial void OnidVariantChanging(System.Nullable<int> value);
    partial void OnidVariantChanged();
    partial void OnbVideoChanging(System.Nullable<bool> value);
    partial void OnbVideoChanged();
    partial void OnbVdvReclamChanging(System.Nullable<bool> value);
    partial void OnbVdvReclamChanged();
    partial void OnbDominoReclamChanging(System.Nullable<bool> value);
    partial void OnbDominoReclamChanged();
    #endregion
		
		public RoomsForSale()
		{
			this._Balcony = default(EntityRef<Balcony>);
			this._District = default(EntityRef<District>);
			this._Planing = default(EntityRef<Planing>);
			this._Rielter = default(EntityRef<Rielter>);
			this._WallMatherial = default(EntityRef<WallMatherial>);
			this._Street = default(EntityRef<Street>);
			this._Variant = default(EntityRef<Variant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRoomsForSale", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRoomsForSale
		{
			get
			{
				return this._idRoomsForSale;
			}
			set
			{
				if ((this._idRoomsForSale != value))
				{
					this.OnidRoomsForSaleChanging(value);
					this.SendPropertyChanging();
					this._idRoomsForSale = value;
					this.SendPropertyChanged("idRoomsForSale");
					this.OnidRoomsForSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iRoomsAmount", DbType="Int")]
		public System.Nullable<int> iRoomsAmount
		{
			get
			{
				return this._iRoomsAmount;
			}
			set
			{
				if ((this._iRoomsAmount != value))
				{
					this.OniRoomsAmountChanging(value);
					this.SendPropertyChanging();
					this._iRoomsAmount = value;
					this.SendPropertyChanged("iRoomsAmount");
					this.OniRoomsAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iRoomsAll", DbType="Int")]
		public System.Nullable<int> iRoomsAll
		{
			get
			{
				return this._iRoomsAll;
			}
			set
			{
				if ((this._iRoomsAll != value))
				{
					this.OniRoomsAllChanging(value);
					this.SendPropertyChanging();
					this._iRoomsAll = value;
					this.SendPropertyChanged("iRoomsAll");
					this.OniRoomsAllChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", DbType="Int")]
		public System.Nullable<int> idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcHouseNumber", DbType="VarChar(10)")]
		public string vcHouseNumber
		{
			get
			{
				return this._vcHouseNumber;
			}
			set
			{
				if ((this._vcHouseNumber != value))
				{
					this.OnvcHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._vcHouseNumber = value;
					this.SendPropertyChanged("vcHouseNumber");
					this.OnvcHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloor", DbType="Int")]
		public System.Nullable<int> iFloor
		{
			get
			{
				return this._iFloor;
			}
			set
			{
				if ((this._iFloor != value))
				{
					this.OniFloorChanging(value);
					this.SendPropertyChanging();
					this._iFloor = value;
					this.SendPropertyChanged("iFloor");
					this.OniFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iFloors", DbType="Int")]
		public System.Nullable<int> iFloors
		{
			get
			{
				return this._iFloors;
			}
			set
			{
				if ((this._iFloors != value))
				{
					this.OniFloorsChanging(value);
					this.SendPropertyChanging();
					this._iFloors = value;
					this.SendPropertyChanged("iFloors");
					this.OniFloorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlane", DbType="Int")]
		public System.Nullable<int> idPlane
		{
			get
			{
				return this._idPlane;
			}
			set
			{
				if ((this._idPlane != value))
				{
					if (this._Planing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPlaneChanging(value);
					this.SendPropertyChanging();
					this._idPlane = value;
					this.SendPropertyChanged("idPlane");
					this.OnidPlaneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWallMatherial", DbType="Int")]
		public System.Nullable<int> idWallMatherial
		{
			get
			{
				return this._idWallMatherial;
			}
			set
			{
				if ((this._idWallMatherial != value))
				{
					if (this._WallMatherial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWallMatherialChanging(value);
					this.SendPropertyChanging();
					this._idWallMatherial = value;
					this.SendPropertyChanged("idWallMatherial");
					this.OnidWallMatherialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iAllArea", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> iAllArea
		{
			get
			{
				return this._iAllArea;
			}
			set
			{
				if ((this._iAllArea != value))
				{
					this.OniAllAreaChanging(value);
					this.SendPropertyChanging();
					this._iAllArea = value;
					this.SendPropertyChanged("iAllArea");
					this.OniAllAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBalcony", DbType="Int")]
		public System.Nullable<int> idBalcony
		{
			get
			{
				return this._idBalcony;
			}
			set
			{
				if ((this._idBalcony != value))
				{
					if (this._Balcony.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBalconyChanging(value);
					this.SendPropertyChanging();
					this._idBalcony = value;
					this.SendPropertyChanged("idBalcony");
					this.OnidBalconyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcComment", DbType="VarChar(200)")]
		public string vcComment
		{
			get
			{
				return this._vcComment;
			}
			set
			{
				if ((this._vcComment != value))
				{
					this.OnvcCommentChanging(value);
					this.SendPropertyChanging();
					this._vcComment = value;
					this.SendPropertyChanged("vcComment");
					this.OnvcCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iPrice", DbType="Int")]
		public System.Nullable<int> iPrice
		{
			get
			{
				return this._iPrice;
			}
			set
			{
				if ((this._iPrice != value))
				{
					this.OniPriceChanging(value);
					this.SendPropertyChanging();
					this._iPrice = value;
					this.SendPropertyChanged("iPrice");
					this.OniPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRielter", DbType="Int")]
		public System.Nullable<int> idRielter
		{
			get
			{
				return this._idRielter;
			}
			set
			{
				if ((this._idRielter != value))
				{
					if (this._Rielter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRielterChanging(value);
					this.SendPropertyChanging();
					this._idRielter = value;
					this.SendPropertyChanged("idRielter");
					this.OnidRielterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bActual", DbType="Bit")]
		public System.Nullable<bool> bActual
		{
			get
			{
				return this._bActual;
			}
			set
			{
				if ((this._bActual != value))
				{
					this.OnbActualChanging(value);
					this.SendPropertyChanging();
					this._bActual = value;
					this.SendPropertyChanged("bActual");
					this.OnbActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfAdd
		{
			get
			{
				return this._DateOfAdd;
			}
			set
			{
				if ((this._DateOfAdd != value))
				{
					this.OnDateOfAddChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdd = value;
					this.SendPropertyChanged("DateOfAdd");
					this.OnDateOfAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", DbType="Int")]
		public System.Nullable<int> idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVideo", DbType="Bit")]
		public System.Nullable<bool> bVideo
		{
			get
			{
				return this._bVideo;
			}
			set
			{
				if ((this._bVideo != value))
				{
					this.OnbVideoChanging(value);
					this.SendPropertyChanging();
					this._bVideo = value;
					this.SendPropertyChanged("bVideo");
					this.OnbVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bVdvReclam", DbType="Bit")]
		public System.Nullable<bool> bVdvReclam
		{
			get
			{
				return this._bVdvReclam;
			}
			set
			{
				if ((this._bVdvReclam != value))
				{
					this.OnbVdvReclamChanging(value);
					this.SendPropertyChanging();
					this._bVdvReclam = value;
					this.SendPropertyChanged("bVdvReclam");
					this.OnbVdvReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bDominoReclam", DbType="Bit")]
		public System.Nullable<bool> bDominoReclam
		{
			get
			{
				return this._bDominoReclam;
			}
			set
			{
				if ((this._bDominoReclam != value))
				{
					this.OnbDominoReclamChanging(value);
					this.SendPropertyChanging();
					this._bDominoReclam = value;
					this.SendPropertyChanged("bDominoReclam");
					this.OnbDominoReclamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Balcony_RoomsForSale", Storage="_Balcony", ThisKey="idBalcony", OtherKey="idBalcony", IsForeignKey=true)]
		public Balcony Balcony
		{
			get
			{
				return this._Balcony.Entity;
			}
			set
			{
				Balcony previousValue = this._Balcony.Entity;
				if (((previousValue != value) 
							|| (this._Balcony.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Balcony.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._Balcony.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idBalcony = value.idBalcony;
					}
					else
					{
						this._idBalcony = default(Nullable<int>);
					}
					this.SendPropertyChanged("Balcony");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_RoomsForSale", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Planing_RoomsForSale", Storage="_Planing", ThisKey="idPlane", OtherKey="idPlaning", IsForeignKey=true)]
		public Planing Planing
		{
			get
			{
				return this._Planing.Entity;
			}
			set
			{
				Planing previousValue = this._Planing.Entity;
				if (((previousValue != value) 
							|| (this._Planing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Planing.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._Planing.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idPlane = value.idPlaning;
					}
					else
					{
						this._idPlane = default(Nullable<int>);
					}
					this.SendPropertyChanged("Planing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rielter_RoomsForSale", Storage="_Rielter", ThisKey="idRielter", OtherKey="idRielter", IsForeignKey=true)]
		public Rielter Rielter
		{
			get
			{
				return this._Rielter.Entity;
			}
			set
			{
				Rielter previousValue = this._Rielter.Entity;
				if (((previousValue != value) 
							|| (this._Rielter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rielter.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._Rielter.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idRielter = value.idRielter;
					}
					else
					{
						this._idRielter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rielter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WallMatherial_RoomsForSale", Storage="_WallMatherial", ThisKey="idWallMatherial", OtherKey="idWallMatherial", IsForeignKey=true)]
		public WallMatherial WallMatherial
		{
			get
			{
				return this._WallMatherial.Entity;
			}
			set
			{
				WallMatherial previousValue = this._WallMatherial.Entity;
				if (((previousValue != value) 
							|| (this._WallMatherial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WallMatherial.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._WallMatherial.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idWallMatherial = value.idWallMatherial;
					}
					else
					{
						this._idWallMatherial = default(Nullable<int>);
					}
					this.SendPropertyChanged("WallMatherial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_RoomsForSale", Storage="_Street", ThisKey="idStreet", OtherKey="idStreet", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idStreet = value.idStreet;
					}
					else
					{
						this._idStreet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_RoomsForSale", Storage="_Variant", ThisKey="idVariant", OtherKey="idVariant", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.RoomsForSales.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.RoomsForSales.Add(this);
						this._idVariant = value.idVariant;
					}
					else
					{
						this._idVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SanUsel")]
	public partial class SanUsel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSanUsel;
		
		private string _vcSanUsel;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSanUselChanging(int value);
    partial void OnidSanUselChanged();
    partial void OnvcSanUselChanging(string value);
    partial void OnvcSanUselChanged();
    #endregion
		
		public SanUsel()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSanUsel", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSanUsel
		{
			get
			{
				return this._idSanUsel;
			}
			set
			{
				if ((this._idSanUsel != value))
				{
					this.OnidSanUselChanging(value);
					this.SendPropertyChanging();
					this._idSanUsel = value;
					this.SendPropertyChanged("idSanUsel");
					this.OnidSanUselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcSanUsel", DbType="VarChar(50)")]
		public string vcSanUsel
		{
			get
			{
				return this._vcSanUsel;
			}
			set
			{
				if ((this._vcSanUsel != value))
				{
					this.OnvcSanUselChanging(value);
					this.SendPropertyChanging();
					this._vcSanUsel = value;
					this.SendPropertyChanged("vcSanUsel");
					this.OnvcSanUselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SanUsel_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idSanUsel", OtherKey="idSanUsel")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.SanUsel = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.SanUsel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Street")]
	public partial class Street : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStreet;
		
		private System.Nullable<int> _idDistrict;
		
		private string _vcStreet;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<HomestadForSale> _HomestadForSales;
		
		private EntitySet<HousesForSale> _HousesForSales;
		
		private EntitySet<PlacementForSale> _PlacementForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
		private EntityRef<District> _District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStreetChanging(int value);
    partial void OnidStreetChanged();
    partial void OnidDistrictChanging(System.Nullable<int> value);
    partial void OnidDistrictChanged();
    partial void OnvcStreetChanging(string value);
    partial void OnvcStreetChanged();
    #endregion
		
		public Street()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._HomestadForSales = new EntitySet<HomestadForSale>(new Action<HomestadForSale>(this.attach_HomestadForSales), new Action<HomestadForSale>(this.detach_HomestadForSales));
			this._HousesForSales = new EntitySet<HousesForSale>(new Action<HousesForSale>(this.attach_HousesForSales), new Action<HousesForSale>(this.detach_HousesForSales));
			this._PlacementForSales = new EntitySet<PlacementForSale>(new Action<PlacementForSale>(this.attach_PlacementForSales), new Action<PlacementForSale>(this.detach_PlacementForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			this._District = default(EntityRef<District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStreet", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStreet
		{
			get
			{
				return this._idStreet;
			}
			set
			{
				if ((this._idStreet != value))
				{
					this.OnidStreetChanging(value);
					this.SendPropertyChanging();
					this._idStreet = value;
					this.SendPropertyChanged("idStreet");
					this.OnidStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDistrict", DbType="Int")]
		public System.Nullable<int> idDistrict
		{
			get
			{
				return this._idDistrict;
			}
			set
			{
				if ((this._idDistrict != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDistrictChanging(value);
					this.SendPropertyChanging();
					this._idDistrict = value;
					this.SendPropertyChanged("idDistrict");
					this.OnidDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcStreet", DbType="VarChar(100)")]
		public string vcStreet
		{
			get
			{
				return this._vcStreet;
			}
			set
			{
				if ((this._vcStreet != value))
				{
					this.OnvcStreetChanging(value);
					this.SendPropertyChanging();
					this._vcStreet = value;
					this.SendPropertyChanged("vcStreet");
					this.OnvcStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idStreet", OtherKey="idStreet")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_HomestadForSale", Storage="_HomestadForSales", ThisKey="idStreet", OtherKey="idStreet")]
		public EntitySet<HomestadForSale> HomestadForSales
		{
			get
			{
				return this._HomestadForSales;
			}
			set
			{
				this._HomestadForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_HousesForSale", Storage="_HousesForSales", ThisKey="idStreet", OtherKey="idStreet")]
		public EntitySet<HousesForSale> HousesForSales
		{
			get
			{
				return this._HousesForSales;
			}
			set
			{
				this._HousesForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_PlacementForSale", Storage="_PlacementForSales", ThisKey="idStreet", OtherKey="idStreet")]
		public EntitySet<PlacementForSale> PlacementForSales
		{
			get
			{
				return this._PlacementForSales;
			}
			set
			{
				this._PlacementForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_RoomsForSale", Storage="_RoomsForSales", ThisKey="idStreet", OtherKey="idStreet")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Street", Storage="_District", ThisKey="idDistrict", OtherKey="idDistrict", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Streets.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Streets.Add(this);
						this._idDistrict = value.idDistrict;
					}
					else
					{
						this._idDistrict = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
		
		private void attach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
		
		private void attach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
		
		private void attach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Variant")]
	public partial class Variant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVariant;
		
		private string _vcVariant;
		
		private EntitySet<AppartmentForSale> _AppartmentForSales;
		
		private EntitySet<HomestadForSale> _HomestadForSales;
		
		private EntitySet<HousesForSale> _HousesForSales;
		
		private EntitySet<PlacementForSale> _PlacementForSales;
		
		private EntitySet<RoomsForSale> _RoomsForSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVariantChanging(int value);
    partial void OnidVariantChanged();
    partial void OnvcVariantChanging(string value);
    partial void OnvcVariantChanged();
    #endregion
		
		public Variant()
		{
			this._AppartmentForSales = new EntitySet<AppartmentForSale>(new Action<AppartmentForSale>(this.attach_AppartmentForSales), new Action<AppartmentForSale>(this.detach_AppartmentForSales));
			this._HomestadForSales = new EntitySet<HomestadForSale>(new Action<HomestadForSale>(this.attach_HomestadForSales), new Action<HomestadForSale>(this.detach_HomestadForSales));
			this._HousesForSales = new EntitySet<HousesForSale>(new Action<HousesForSale>(this.attach_HousesForSales), new Action<HousesForSale>(this.detach_HousesForSales));
			this._PlacementForSales = new EntitySet<PlacementForSale>(new Action<PlacementForSale>(this.attach_PlacementForSales), new Action<PlacementForSale>(this.detach_PlacementForSales));
			this._RoomsForSales = new EntitySet<RoomsForSale>(new Action<RoomsForSale>(this.attach_RoomsForSales), new Action<RoomsForSale>(this.detach_RoomsForSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVariant", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVariant
		{
			get
			{
				return this._idVariant;
			}
			set
			{
				if ((this._idVariant != value))
				{
					this.OnidVariantChanging(value);
					this.SendPropertyChanging();
					this._idVariant = value;
					this.SendPropertyChanged("idVariant");
					this.OnidVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vcVariant", DbType="VarChar(20)")]
		public string vcVariant
		{
			get
			{
				return this._vcVariant;
			}
			set
			{
				if ((this._vcVariant != value))
				{
					this.OnvcVariantChanging(value);
					this.SendPropertyChanging();
					this._vcVariant = value;
					this.SendPropertyChanged("vcVariant");
					this.OnvcVariantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_AppartmentForSale", Storage="_AppartmentForSales", ThisKey="idVariant", OtherKey="idVariant")]
		public EntitySet<AppartmentForSale> AppartmentForSales
		{
			get
			{
				return this._AppartmentForSales;
			}
			set
			{
				this._AppartmentForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_HomestadForSale", Storage="_HomestadForSales", ThisKey="idVariant", OtherKey="idVariant")]
		public EntitySet<HomestadForSale> HomestadForSales
		{
			get
			{
				return this._HomestadForSales;
			}
			set
			{
				this._HomestadForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_HousesForSale", Storage="_HousesForSales", ThisKey="idVariant", OtherKey="idVariant")]
		public EntitySet<HousesForSale> HousesForSales
		{
			get
			{
				return this._HousesForSales;
			}
			set
			{
				this._HousesForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_PlacementForSale", Storage="_PlacementForSales", ThisKey="idVariant", OtherKey="idVariant")]
		public EntitySet<PlacementForSale> PlacementForSales
		{
			get
			{
				return this._PlacementForSales;
			}
			set
			{
				this._PlacementForSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_RoomsForSale", Storage="_RoomsForSales", ThisKey="idVariant", OtherKey="idVariant")]
		public EntitySet<RoomsForSale> RoomsForSales
		{
			get
			{
				return this._RoomsForSales;
			}
			set
			{
				this._RoomsForSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_AppartmentForSales(AppartmentForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
		
		private void attach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_HomestadForSales(HomestadForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
		
		private void attach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_HousesForSales(HousesForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
		
		private void attach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_PlacementForSales(PlacementForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
		
		private void attach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_RoomsForSales(RoomsForSale entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
	}
}
#pragma warning restore 1591
